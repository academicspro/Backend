generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// <------------------------------------------------ Super Admin Models are defined here -------------------------------------------------------------->

model School {
  id         String   @id @default(cuid())
  guid       String   @unique @default(cuid())
  SchoolName String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  userId String @unique

  user User @relation(fields: [userId], references: [id])

  students      Student[]
  teachers      Teacher[]
  parents       Parent[]
  libraries     Library[]
  hostels       Hostel[]
  transports    Transport[]
  accounts      Account[]
  subscription  subscription[]
  fees          Fee[]
  paymentSecret PaymentSecret?

  Ticket Ticket[]

  Feedback Feedback[]

  BusStops BusStop[]

  Routes Route[]

  Incharges Incharge[]

  Conductors Conductor[]

  Drivers Driver[]

  Buses Bus[]

  SalaryPayment  SalaryPayment[]
  departments    Department[]
  designations   Designation[]
  duties         Duty[]
  payrolls       Payroll[]
  inventoryItems InventoryItem[]
  visitors       Visitor[] // Added relation to Visitor model
}

// ***********************************************HRM Models************************************************

model Department {
  id          String   @id @default(cuid())
  guid        String   @unique @default(cuid())
  name        String
  description String?
  schoolId    String
  school      School   @relation(fields: [schoolId], references: [id])
  users       User[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
}

model Designation {
  id          String   @id @default(cuid())
  guid        String   @unique @default(cuid())
  name        String
  description String?
  schoolId    String
  school      School   @relation(fields: [schoolId], references: [id])
  users       User[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
}

model Payroll {
  id          String        @id @default(cuid())
  guid        String        @unique @default(cuid())
  userId      String
  user        User          @relation(fields: [userId], references: [id])
  schoolId    String
  school      School        @relation(fields: [schoolId], references: [id])
  periodStart DateTime
  periodEnd   DateTime
  grossSalary Float
  deductions  Float         @default(0)
  netSalary   Float
  paymentDate DateTime?
  status      PayrollStatus @default(PENDING)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @default(now()) @updatedAt
}

// Inventory Models
model InventoryItem {
  id           String                 @id @default(cuid())
  guid         String                 @unique @default(cuid())
  name         String
  description  String?
  quantity     Int
  schoolId     String
  school       School                 @relation(fields: [schoolId], references: [id])
  createdAt    DateTime               @default(now())
  updatedAt    DateTime               @default(now()) @updatedAt
  transactions InventoryTransaction[]
}

model InventoryTransaction {
  id              String          @id @default(cuid())
  guid            String          @unique @default(cuid())
  inventoryItemId String
  inventoryItem   InventoryItem   @relation(fields: [inventoryItemId], references: [id])
  type            TransactionType
  quantity        Int
  date            DateTime        @default(now())
  userId          String?
  user            User?           @relation(fields: [userId], references: [id])
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @default(now()) @updatedAt
}

model User {
  id         String    @id @default(cuid())
  guid       String    @unique @default(cuid())
  name       String
  email      String    @unique
  phone      String
  profilePic String?
  password   String?
  address    String?
  city       String?
  state      String?
  country    String?
  pincode    String?
  bloodType  String?
  sex        UserSex?
  role       Role      @default(superadmin)
  schoolId   String?
  school     School?
  students   Student[]

  reputation      Int          @default(0)
  leaderboard     Leaderboard?
  coins           Int          @default(0) // Coins earned
  redeemedBalance Float        @default(0.0) // Money redeemed
  doubts          Doubt[]
  answers         Answer[]
  quizzes         QuizResult[]
  roadmaps        Roadmap[]

  PasswordResetToken PasswordResetToken[]
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @default(now()) @updatedAt
  teacherId          String?
  studentId          String?
  parentId           String?
  libraryId          String?
  hostelId           String?
  transportId        String?
  accountId          String?
  teachers           Teacher[]
  parents            Parent[]
  libraries          Library[]
  hostels            Hostel[]
  transports         Transport[]
  accounts           Account[]

  Todo Todo[]

  Newspaper Newspaper[]

  PYQ PYQ[]

  Competition Competition[]

  Transaction Transaction[]

  bookIssues      BookIssue[] // Users who borrow books
  disputes        Dispute[] // Users raising disputes
  disputeMessages DisputeMessage[] // Users participating in dispute conversations

  // HRM fields
  employeeType          EmployeeType?
  departmentId          String?
  department            Department?            @relation(fields: [departmentId], references: [id])
  designationId         String?
  designation           Designation?           @relation(fields: [designationId], references: [id])
  duties                Duty[]
  payrolls              Payroll[]
  inventoryTransactions InventoryTransaction[]
}

model PasswordResetToken {
  id        Int       @id @default(autoincrement())
  guid      String    @unique @default(cuid())
  token     String    @unique
  userId    String
  createdAt DateTime  @default(now())
  expiresAt DateTime
  usedAt    DateTime?

  user User @relation(fields: [userId], references: [id])

  @@index([expiresAt])
}

model plan {
  id           String   @id @default(cuid())
  guid         String   @unique @default(cuid())
  name         String // Basic , Pro , Enterprise
  price        Float
  durationDays Int // 7,15,30
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now()) @updatedAt

  subscription subscription[]
}

model subscription {
  id        String   @id @default(cuid())
  guid      String   @unique @default(cuid())
  schoolId  String
  school    School   @relation(fields: [schoolId], references: [id])
  planId    String
  plan      plan     @relation(fields: [planId], references: [id])
  startDate DateTime
  endDate   DateTime
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Payment {
  id                String   @id @default(cuid())
  guid              String   @unique @default(cuid())
  feeId             String
  fee               Fee      @relation(fields: [feeId], references: [id])
  amount            Float
  razorpayOrderId   String?  @unique
  razorpayPaymentId String?
  method            String? // Cash , Online
  status            String   @default("Pending") // Pending , PAID, Failed
  paymentDate       DateTime
  createdAt         DateTime @default(now())
  updatedAt         DateTime @default(now()) @updatedAt

  Student Student[]
}

model SalaryPayment {
  id          String   @id @default(cuid())
  guid        String   @unique @default(cuid())
  teacherId   String
  teacher     Teacher  @relation(fields: [teacherId], references: [id])
  schoolId    String
  school      School   @relation(fields: [schoolId], references: [id])
  amount      Int
  period      String // e.g., "2023-09"
  paymentDate DateTime
  method      String // Cash, Bank Transfer
  status      String // Success, Failed
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
}

model Notification {
  id        String   @id @default(cuid())
  guid      String   @unique @default(cuid())
  feeId     String
  type      String // Reminder , Overdue
  sentAt    DateTime @default(now())
  createdAt DateTime @default(now())
}

model Ticket {
  id          String   @id @default(cuid())
  guid        String   @unique @default(cuid())
  title       String
  description String
  status      String   @default("Open") // Open , Closed
  priority    String   @default("Low") // Low , Medium , High
  schoolId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt

  School School @relation(fields: [schoolId], references: [id])
}

model Feedback {
  id          String   @id @default(cuid())
  guid        String   @unique @default(cuid())
  title       String
  description String
  schoolId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt

  School School @relation(fields: [schoolId], references: [id])
}

model Todo {
  id          String     @id @default(cuid())
  guid        String     @unique @default(cuid())
  title       String
  description String
  status      TodoStatus @default(PENDING)
  userId      String
  user        User       @relation(fields: [userId], references: [id])
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

// <--------------------------------------------------------------- Admin Models are defined here------------------------------------------------------------------>

model PaymentSecret {
  id        String   @id @default(cuid())
  guid      String   @unique @default(cuid())
  schoolId  String   @unique
  school    School   @relation(fields: [schoolId], references: [id])
  keyId     String
  keySecret String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Fee {
  id          String    @id @default(cuid())
  guid        String    @unique @default(cuid())
  studentId   String
  student     Student   @relation(fields: [studentId], references: [id])
  schoolId    String
  school      School    @relation(fields: [schoolId], references: [id])
  amount      Float
  dueDate     DateTime
  category    String
  finePerDay  Float     @default(0)
  status      String    @default("Pending") // Pending , Partial, PAID , Overdue
  Payment     Payment[]
  paymentDate DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt
}

model Event {
  id          String   @id @default(cuid())
  guid        String   @unique @default(cuid())
  title       String
  description String
  startTime   DateTime
  endTime     DateTime
  classId     String?
  class       Class?   @relation(fields: [classId], references: [id])
}

model Announcement {
  id          String   @id @default(cuid())
  guid        String   @unique @default(cuid())
  title       String
  description String
  date        DateTime
  classId     String?
  class       Class?   @relation(fields: [classId], references: [id])
}

model Visitor {
  id         String    @id @default(cuid())
  guid       String    @unique @default(cuid())
  name       String
  phone      String
  email      String?
  purpose    String
  token      String    @unique // Unique token for QR code
  validFrom  DateTime // Start of validity period
  validUntil DateTime // End of validity period
  entryTime  DateTime? // Time of entry
  exitTime   DateTime? // Time of exit
  schoolId   String
  school     School    @relation(fields: [schoolId], references: [id])
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now()) @updatedAt
}

// <---------------------------------------------------------------- Teacher Models are defined here ------------------------------------------------------------------->

model Teacher {
  id                    String         @id @default(cuid())
  guid                  String         @unique @default(cuid())
  dateofJoin            DateTime? //@map("date_of_join")
  fatherName            String?
  motherName            String?
  dateOfBirth           DateTime?
  maritalStatus         MaritalStatus?
  languagesKnown        String
  Qualification         String?
  workExperience        String?
  previousSchool        String?
  previousSchoolAddress String?
  previousSchoolPhone   String?
  PanNumber             String?
  status                String?        @default("Active") // Active , Inactive
  salary                Int?
  contractType          String?        @default("Full Time") // Full Time , Part Time
  dateOfPayment         DateTime?
  medicalLeave          String?
  casualLeave           String?
  MaternityLeave        String?
  SickLeave             String?
  accountNumber         String?
  bankName              String?
  ifscCode              String?
  branchName            String?
  Route                 String?
  VehicleNumber         String?
  PickUpPoint           String?
  hostelName            String?
  RoomNumber            String?
  facebook              String?
  twitter               String?
  linkedin              String?
  instagram             String?
  youtube               String?
  Resume                String?
  joiningLetter         String?
  schoolId              String
  userId                String?
  user                  User?          @relation(fields: [userId], references: [id])
  school                School         @relation(fields: [schoolId], references: [id])
  createdAt             DateTime       @default(now())
  updatedAt             DateTime       @default(now()) @updatedAt
  subjects              Subject[]
  lessons               Lesson[]
  classes               Class[]

  SalaryPayment SalaryPayment[]
}

model Grade {
  id        String  @id @default(cuid())
  guid      String  @unique @default(cuid())
  level     Int     @unique
  studentId String
  students  Student @relation(fields: [studentId], references: [id])
  classess  Class[]
}

model Class {
  id            String         @id @default(cuid())
  guid          String         @unique @default(cuid())
  name          String         @unique
  capacity      Int
  teacherId     String?
  teacher       Teacher?       @relation(fields: [teacherId], references: [id])
  lessons       Lesson[]
  students      Student[]
  grade         Grade[]
  events        Event[]
  announcements Announcement[]
}

model Subject {
  id       String    @id @default(cuid())
  guid     String    @unique @default(cuid())
  name     String    @unique
  teachers Teacher[]
  lessons  Lesson[]
}

model Lesson {
  id          String       @id @default(cuid())
  guid        String       @unique @default(cuid())
  name        String
  day         Day
  startTime   DateTime
  endTime     DateTime
  subjectId   String
  subject     Subject      @relation(fields: [subjectId], references: [id])
  classId     String
  class       Class        @relation(fields: [classId], references: [id])
  teacherId   String
  teacher     Teacher      @relation(fields: [teacherId], references: [id])
  exams       Exam[]
  assignments Assignment[]
  attendances Attendance[]
}

model Exam {
  id        String   @id @default(cuid())
  guid      String   @unique @default(cuid())
  title     String
  startTime DateTime
  endTime   DateTime
  lessonId  String
  lesson    Lesson   @relation(fields: [lessonId], references: [id])
  results   Result[]
}

model Assignment {
  id        String   @id @default(cuid())
  guid      String   @unique @default(cuid())
  title     String
  startDate DateTime
  dueDate   DateTime
  lessonId  String
  lesson    Lesson   @relation(fields: [lessonId], references: [id])
  results   Result[]
}

model Result {
  id           String      @id @default(cuid())
  guid         String      @unique @default(cuid())
  score        Int
  examId       String?
  exam         Exam?       @relation(fields: [examId], references: [id])
  assignmentId String?
  assignment   Assignment? @relation(fields: [assignmentId], references: [id])
  studentId    String
  student      Student     @relation(fields: [studentId], references: [id])
}

model Attendance {
  id        String   @id @default(cuid())
  guid      String   @unique @default(cuid())
  date      DateTime
  present   Boolean
  studentId String
  student   Student  @relation(fields: [studentId], references: [id])
  lessonId  String
  lesson    Lesson   @relation(fields: [lessonId], references: [id])

  Bus Bus[]
}

// <--------------------------------------------------------------------------- Student Models are defined here ------------------------------------------------------------------->

model Student {
  id            String   @id @default(cuid())
  guid          String   @unique @default(cuid())
  AcademicYear  String
  AdmissionNo   String
  AdmissionDate DateTime
  RollNo        String
  status        String?  @default("Active") // Active , Inactive

  section String

  dateOfBirth DateTime

  Religion String?
  category String?

  caste          String?
  MotherTongue   String?
  languagesKnown String

  // Father Details
  fatherName       String
  fatheremail      String
  fatherPhone      String
  fatherOccupation String

  // Mother Details
  motherName       String
  motherEmail      String
  motherPhone      String
  motherOccupation String

  // Guardian Details

  gardianName       String
  gardianRealtion   String
  gardianEmail      String
  gardianPhone      String
  gardianOccupation String
  gardianAddress    String

  // Siblings Details

  areSiblingStudying  String //later change it to yes no enum 
  siblingName         String
  siblingClass        String
  siblingRollNo       String
  sibllingAdmissionNo String

  // Address Details
  currentAddress   String
  permanentAddress String

  // Transport Details

  // route         String
  vehicleNumber String
  pickUpPoint   String

  routeId   String?
  route     Route?   @relation(fields: [routeId], references: [id])
  busId     String?
  bus       Bus?     @relation(fields: [busId], references: [id])
  busStopId String?
  busStop   BusStop? @relation(fields: [busStopId], references: [id])

  // Hostel Details

  hostelName String
  roomNumber String

  // Document's

  medicalCertificate  String
  transferCertificate String

  // medical History
  medicaConditon String // late change it to enum
  allergies      String
  medicationName String

  //previous School Details

  schoolName String
  Adress     String

  schoolId    String
  userId      String?
  user        User?        @relation(fields: [userId], references: [id])
  school      School       @relation(fields: [schoolId], references: [id])
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @default(now()) @updatedAt
  classId     String
  class       Class        @relation(fields: [classId], references: [id])
  attendances Attendance[]
  results     Result[]
  Grade       Grade[]
  parent      Parent[]
  fees        Fee[]
  payments    Payment[]

  BusAttendance BusAttendance[]

  Complaint Complaint[]

  Room Room[]

  AccommodationRequest AccommodationRequest[]

  HostelFee HostelFee[]

  MedicalEmergency MedicalEmergency[]

  OutpassRequest OutpassRequest[]
}

model Doubt {
  id        String   @id @default(cuid())
  guid      String   @unique @default(cuid())
  title     String
  content   String
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  answers   Answer[]
  upvotes   Int      @default(0)
  createdAt DateTime @default(now())
}

model PYQ {
  id         String   @id @default(cuid())
  guid       String   @unique @default(cuid())
  question   String
  solution   String
  subject    String
  topic      String
  uploaderId String
  uploader   User     @relation(fields: [uploaderId], references: [id])
  createdAt  DateTime @default(now())
}

model Answer {
  id        String   @id @default(cuid())
  guid      String   @unique @default(cuid())
  content   String
  userId    String
  doubtId   String
  user      User     @relation(fields: [userId], references: [id])
  doubt     Doubt    @relation(fields: [doubtId], references: [id])
  upvotes   Int      @default(0)
  createdAt DateTime @default(now())
}

model Leaderboard {
  id          String   @id @default(cuid())
  guid        String   @unique @default(cuid())
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id])
  points      Int      @default(0)
  coinsEarned Int      @default(0)
  rank        Int
  updatedAt   DateTime @updatedAt
}

model Competition {
  id        String   @id @default(cuid())
  guid      String   @unique @default(cuid())
  name      String
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  score     Int      @default(0)
  createdAt DateTime @default(now())
}

model Roadmap {
  id        String   @id @default(cuid())
  guid      String   @unique @default(cuid())
  title     String
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  topics    Topic[]
  createdAt DateTime @default(now())
}

model Topic {
  id        String  @id @default(cuid())
  guid      String  @unique @default(cuid())
  name      String
  roadmapId String
  roadmap   Roadmap @relation(fields: [roadmapId], references: [id])
}

model Quiz {
  id        String   @id @default(cuid())
  guid      String   @unique @default(cuid())
  question  String
  options   String[] // Array of options
  answer    String
  createdAt DateTime @default(now())

  QuizResult QuizResult[]
}

model QuizResult {
  id        String   @id @default(cuid())
  guid      String   @unique @default(cuid())
  userId    String
  quizId    String
  user      User     @relation(fields: [userId], references: [id])
  quiz      Quiz     @relation(fields: [quizId], references: [id])
  score     Int
  createdAt DateTime @default(now())
}

model Newspaper {
  id        String   @id @default(cuid())
  guid      String   @unique @default(cuid())
  title     String
  content   String
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}

model Transaction {
  id         String   @id @default(cuid())
  guid       String   @unique @default(cuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  coinsUsed  Int
  amountPaid Float
  status     String   @default("PENDING") // PENDING, COMPLETED, REJECTED
  createdAt  DateTime @default(now())
}

// <------------------------------------------------------------- Parent Models are defined here ------------------------------------------------------------------->

model Parent {
  id                String  @id @default(cuid())
  guid              String  @unique @default(cuid())
  gardianName       String
  gardianRealtion   String
  gardianEmail      String
  gardianPhone      String
  gardianOccupation String
  gardianAddress    String
  role              Role    @default(parent)
  password          String?

  schoolId  String
  userId    String?
  user      User?     @relation(fields: [userId], references: [id])
  school    School    @relation(fields: [schoolId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  students  Student[]
}

// <------------------------------------------------------------- Library Models are defined here ------------------------------------------------------------------->

model Library {
  id         String   @id @default(cuid())
  guid       String   @unique @default(cuid())
  schoolId   String
  userId     String?
  finePerDay Float    @default(0.0) // Fine rate per day for overdue books
  books      Book[]
  user       User?    @relation(fields: [userId], references: [id])
  school     School   @relation(fields: [schoolId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt
}

// Book model (represents book titles, including magazines and comics)
model Book {
  id               String       @id @default(cuid())
  guid             String       @unique @default(cuid())
  title            String
  isbn             String?      @unique
  publicationDate  DateTime?
  genre            String?
  type             BookType // Distinguishes books, magazines, comics
  department       String? // For magazines
  class            String? // For magazines
  subject          String? // For magazines
  edition          String?
  nextEditionCheck DateTime? // Date to check for new editions
  libraryId        String
  library          Library      @relation(fields: [libraryId], references: [id])
  authors          BookAuthor[] // Many-to-many with authors
  copies           BookCopy[] // Physical copies of the book
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @default(now()) @updatedAt
}

// Author model
model Author {
  id        String       @id @default(cuid())
  guid      String       @unique @default(cuid())
  name      String
  books     BookAuthor[] // Many-to-many with books
  createdAt DateTime     @default(now())
  updatedAt DateTime     @default(now()) @updatedAt
}

// BookAuthor model (junction table for Book-Author relationship)
model BookAuthor {
  bookId   String
  guid     String @unique @default(cuid())
  authorId String
  book     Book   @relation(fields: [bookId], references: [id])
  author   Author @relation(fields: [authorId], references: [id])

  @@id([bookId, authorId])
}

// BookCopy model (represents individual physical copies)
model BookCopy {
  id              String         @id @default(cuid())
  guid            String         @unique @default(cuid())
  bookId          String
  accessionNumber String         @unique // Unique identifier for each copy
  status          BookCopyStatus @default(AVAILABLE)
  book            Book           @relation(fields: [bookId], references: [id])
  issues          BookIssue[] // History of issues for this copy
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @default(now()) @updatedAt
}

// BookIssue model (tracks borrowing of book copies)
model BookIssue {
  id         String    @id @default(cuid())
  guid       String    @unique @default(cuid())
  bookCopyId String
  userId     String
  issueDate  DateTime
  dueDate    DateTime
  returnDate DateTime?
  fineAmount Float     @default(0.0)
  finePaid   Boolean   @default(false)
  bookCopy   BookCopy  @relation(fields: [bookCopyId], references: [id])
  user       User      @relation(fields: [userId], references: [id])
  fines      Fine[] // Fines associated with this issue
  disputes   Dispute[] // Disputes related to this issue
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now()) @updatedAt
}

// Fine model
model Fine {
  id          String    @id @default(cuid())
  guid        String    @unique @default(cuid())
  bookIssueId String
  amount      Float
  reason      String
  paid        Boolean   @default(false)
  bookIssue   BookIssue @relation(fields: [bookIssueId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt
}

// Dispute model
model Dispute {
  id          String           @id @default(cuid())
  guid        String           @unique @default(cuid())
  bookIssueId String
  userId      String
  reason      String
  status      DisputeStatus    @default(PENDING)
  resolution  String?
  bookIssue   BookIssue        @relation(fields: [bookIssueId], references: [id])
  user        User             @relation(fields: [userId], references: [id])
  messages    DisputeMessage[] // Conversation thread
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @default(now()) @updatedAt
}

// DisputeMessage model (conversation thread for disputes)
model DisputeMessage {
  id        String   @id @default(cuid())
  guid      String   @unique @default(cuid())
  disputeId String
  userId    String
  message   String
  dispute   Dispute  @relation(fields: [disputeId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}

// <------------------------------------------------------------- Hostel Models are defined here ------------------------------------------------------------------->

model Hostel {
  id         String  @id @default(cuid())
  guid       String  @unique @default(cuid())
  hostelName String?
  location   String?
  capacity   Int

  schoolId String
  school   School  @relation(fields: [schoolId], references: [id])
  userId   String?
  user     User?   @relation(fields: [userId], references: [id])

  rooms     Room[]
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  Complaint Complaint[]

  Duty Duty[]

  HostelExpense HostelExpense[]

  AccommodationRequest AccommodationRequest[]

  HostelFee HostelFee[]

  MedicalEmergency MedicalEmergency[]
}

model Room {
  id          String      @id @default(cuid())
  guid        String      @unique @default(cuid())
  number      String
  type        RoomType
  status      RoomStatus  @default(VACANT)
  hostelId    String
  hostel      Hostel      @relation(fields: [hostelId], references: [id])
  students    Student[]
  inventories Inventory[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @default(now()) @updatedAt
}

model Inventory {
  id        String   @id @default(cuid())
  guid      String   @unique @default(cuid())
  name      String
  quantity  Int
  roomId    String
  room      Room     @relation(fields: [roomId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model AccommodationRequest {
  id        String        @id @default(cuid())
  guid      String        @unique @default(cuid())
  studentId String
  student   Student       @relation(fields: [studentId], references: [id])
  hostelId  String
  hostel    Hostel        @relation(fields: [hostelId], references: [id])
  status    RequestStatus @default(PENDING)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @default(now()) @updatedAt
}

model HostelFee {
  id        String    @id @default(cuid())
  guid      String    @unique @default(cuid())
  amount    Float
  dueDate   DateTime
  studentId String
  student   Student   @relation(fields: [studentId], references: [id])
  hostelId  String
  hostel    Hostel    @relation(fields: [hostelId], references: [id])
  status    FeeStatus @default(UNPAID)
  type      FeeType
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
}

model MedicalEmergency {
  id          String   @id @default(cuid())
  guid        String   @unique @default(cuid())
  description String
  date        DateTime
  studentId   String
  student     Student  @relation(fields: [studentId], references: [id])
  hostelId    String
  hostel      Hostel   @relation(fields: [hostelId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
}

model OutpassRequest {
  id        String        @id @default(cuid())
  guid      String        @unique @default(cuid())
  studentId String
  student   Student       @relation(fields: [studentId], references: [id])
  reason    String
  fromDate  DateTime
  toDate    DateTime
  status    RequestStatus @default(PENDING)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @default(now()) @updatedAt
}

model HostelExpense {
  id          String   @id @default(cuid())
  guid        String   @unique @default(cuid())
  description String
  amount      Float
  date        DateTime
  hostelId    String
  hostel      Hostel   @relation(fields: [hostelId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
}

model Duty {
  id          String  @id @default(cuid())
  guid        String  @unique @default(cuid())
  description String
  assignedTo  String?
  user        User?   @relation(fields: [assignedTo], references: [id])
  hostelId    String
  hostel      Hostel  @relation(fields: [hostelId], references: [id])

  name String

  schoolId String
  school   School @relation(fields: [schoolId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Complaint {
  id          String          @id @default(cuid())
  guid        String          @unique @default(cuid())
  description String
  studentId   String
  student     Student         @relation(fields: [studentId], references: [id])
  hostelId    String
  hostel      Hostel          @relation(fields: [hostelId], references: [id])
  status      ComplaintStatus @default(OPEN)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @default(now()) @updatedAt
}

// <------------------------------------------------------------- Transport Models are defined here ------------------------------------------------------------------->

model Transport {
  id        String   @id @default(cuid())
  guid      String   @unique @default(cuid())
  schoolId  String
  userId    String?
  user      User?    @relation(fields: [userId], references: [id])
  school    School   @relation(fields: [schoolId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Bus {
  id          String       @id @default(cuid())
  guid        String       @unique @default(cuid())
  busNumber   String       @unique
  capacity    Int
  schoolId    String
  school      School       @relation(fields: [schoolId], references: [id])
  routes      Route[]
  drivers     Driver[]
  conductors  Conductor[]
  students    Student[]
  attendances Attendance[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @default(now()) @updatedAt

  BusAttendance BusAttendance[]
}

model Driver {
  id        String   @id @default(cuid())
  guid      String   @unique @default(cuid())
  name      String
  license   String   @unique
  busId     String
  bus       Bus      @relation(fields: [busId], references: [id])
  schoolId  String
  school    School   @relation(fields: [schoolId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Conductor {
  id        String   @id @default(cuid())
  guid      String   @unique @default(cuid())
  name      String
  busId     String
  bus       Bus      @relation(fields: [busId], references: [id])
  schoolId  String
  school    School   @relation(fields: [schoolId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Incharge {
  id        String   @id @default(cuid())
  guid      String   @unique @default(cuid())
  name      String
  schoolId  String
  school    School   @relation(fields: [schoolId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Route {
  id        String    @id @default(cuid())
  guid      String    @unique @default(cuid())
  name      String
  busId     String
  bus       Bus       @relation(fields: [busId], references: [id])
  schoolId  String
  school    School    @relation(fields: [schoolId], references: [id])
  busStops  BusStop[]
  students  Student[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
}

model BusStop {
  id        String    @id @default(cuid())
  guid      String    @unique @default(cuid())
  name      String
  location  String
  routeId   String
  route     Route     @relation(fields: [routeId], references: [id])
  schoolId  String
  school    School    @relation(fields: [schoolId], references: [id])
  students  Student[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
}

model BusAttendance {
  id        String   @id @default(cuid())
  guid      String   @unique @default(cuid())
  studentId String
  student   Student  @relation(fields: [studentId], references: [id])
  busId     String
  bus       Bus      @relation(fields: [busId], references: [id])
  date      DateTime @default(now())
  status    String // "Boarded", "Alighted"
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

// <-------------------------------------------------------------- Account Models are defined here ------------------------------------------------------------------->

model Account {
  id        String   @id @default(cuid())
  guid      String   @unique @default(cuid())
  schoolId  String
  userId    String?
  user      User?    @relation(fields: [userId], references: [id])
  school    School   @relation(fields: [schoolId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

// <---------------------------------------------------------------- All Enums are defined here  ------------------------------------------------------------------->

enum UserSex {
  MALE
  FEMALE
}

enum Day {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
}

enum Role {
  superadmin
  admin
  teacher
  student
  parent
  library
  hostel
  transport
  account
}

enum MaritalStatus {
  MARRIED
  UNMARRIED
  DIVORCED
}

enum TodoStatus {
  PENDING
  COMPLETED
}

enum BookType {
  BOOK
  MAGAZINE
  COMIC
}

enum BookCopyStatus {
  AVAILABLE
  ISSUED
  LOST
  DAMAGED
}

enum DisputeStatus {
  PENDING
  RESOLVED
  DISMISSED
}

enum RoomType {
  SINGLE
  DOUBLE
  TRIPLE
}

enum RoomStatus {
  OCCUPIED
  VACANT
  MAINTENANCE
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
}

enum FeeStatus {
  PAID
  UNPAID
  OVERDUE
}

enum FeeType {
  REGULAR
  FINE
}

enum ComplaintStatus {
  OPEN
  CLOSED
}

enum EmployeeType {
  TEACHER
  LIBRARIAN
  ADMINISTRATOR
  SUPPORT
}

enum PayrollStatus {
  PENDING
  PAID
  CANCELLED
}

enum TransactionType {
  ADD
  REMOVE
  TRANSFER
}

// goverment Exams  --> UPSC , SSC , Bank PO , Railway , Defence --> Link this modulef witj eduni hub project 

// chat --> Add friends, remove friends , chat with friends, can create groups, send media , block user, unblock user , report user, see only thier schools student, video call features , audio call feature , 

// zoom meeting call , White board(With all Fetures ), screen sharing, recording, chat, raise hand, mute, unmute, video off, video on, share screen, invite, end meeting, leave meeting,

// download reports ,  import Reports , export Reports , Custom report download , print , share Reports ,
