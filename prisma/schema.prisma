generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// <------------------------------------------------ Super Admin Models are defined here -------------------------------------------------------------->

model School {
  id String @id @default(cuid()) @map("id")

  schoolName String   @map("school_name")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @default(now()) @updatedAt @map("updated_at")

  userId String @unique @map("user_id")

  user User @relation(fields: [userId], references: [id])

  students   Student[]
  teachers   Teacher[]
  libraries  Library[]
  hostels    Hostel[]
  transports Transport[]
  accounts   Account[]

  subscription  subscription[]
  fees          Fee[]
  paymentSecret PaymentSecret?

  ticket Ticket[]

  feedback Feedback[]

  busStops BusStop[]

  routes Route[]

  incharges Incharge[]

  conductors Conductor[]

  drivers Driver[]

  buses Bus[]

  salaryPayment         SalaryPayment[]
  departments           Department[]
  designations          Designation[]
  duties                Duty[]
  payrolls              Payroll[]
  inventoryItems        InventoryItem[]
  visitors              Visitor[]
  todo                  Todo[]
  schoolFeatureRequests SchoolFeatureRequests[]
}

// ***********************************************HRM Models************************************************

model Department {
  id String @id @default(cuid()) @map("id")

  name        String   @map("depatment_name")
  description String?  @map("department_description")
  schoolId    String   @map("school_id")
  school      School   @relation(fields: [schoolId], references: [id])
  users       User[]
  createdAt   DateTime @default(now()) @map("department_created_at")
  updatedAt   DateTime @default(now()) @updatedAt @map("department_updated_at")
}

model Designation {
  id String @id @default(cuid()) @map("designation_id")

  name        String   @map("designation_name")
  description String?  @map("designation_description")
  schoolId    String   @map("school_id")
  school      School   @relation(fields: [schoolId], references: [id])
  users       User[]
  createdAt   DateTime @default(now()) @map("designation_created_at")
  updatedAt   DateTime @default(now()) @updatedAt @map("designation_updated_at")
}

model Payroll {
  id String @id @default(cuid()) @map("payroll_id")

  userId      String        @map("user_id")
  user        User          @relation(fields: [userId], references: [id])
  schoolId    String        @map("school_id")
  school      School        @relation(fields: [schoolId], references: [id])
  periodStart DateTime      @map("payroll_period_start")
  periodEnd   DateTime      @map("payroll_period_end")
  grossSalary Float         @map("payroll_gross_salary")
  deductions  Float         @default(0) @map("payroll_deductions")
  netSalary   Float         @map("payroll_net_salary")
  paymentDate DateTime?     @map("payroll_payment_date")
  status      PayrollStatus @default(PENDING) @map("payroll_status")
  createdAt   DateTime      @default(now()) @map("payroll_created_at")
  updatedAt   DateTime      @default(now()) @updatedAt @map("payroll_updated_at")
}

model InventoryItem {
  id String @id @default(cuid()) @map("inventory_item_id")

  name         String                 @map("item_name")
  description  String?                @map("item_description")
  quantity     Int                    @map("item_quantity")
  schoolId     String                 @map("school_id")
  school       School                 @relation(fields: [schoolId], references: [id])
  createdAt    DateTime               @default(now()) @map("created_at")
  updatedAt    DateTime               @default(now()) @updatedAt @map("updated_at")
  transactions InventoryTransaction[]
}

model InventoryTransaction {
  id String @id @default(cuid()) @map("transaction_id")

  inventoryItemId String          @map("inventory_item_id")
  inventoryItem   InventoryItem   @relation(fields: [inventoryItemId], references: [id])
  type            TransactionType @map("transaction_type")
  quantity        Int             @map("transaction_quantity")
  date            DateTime        @default(now()) @map("transaction_date")
  userId          String?         @map("user_id")
  user            User?           @relation(fields: [userId], references: [id])
  createdAt       DateTime        @default(now()) @map("created_at")
  updatedAt       DateTime        @default(now()) @updatedAt @map("updated_at")
}

model User {
  id String @id @default(cuid()) @map("user_id")

  name       String  @map("full_name")
  email      String  @unique @map("email_address")
  phone      String  @map("phone_number")
  profilePic String? @map("profile_picture")
  password   String? @map("password_hash")
  address    String  @map("street_address")
  city       String  @map("city_name")
  state      String  @map("state_name")
  country    String  @map("country_name")
  pincode    String  @map("postal_code")
  bloodType  String  @map("blood_type")
  sex        UserSex @map("gender")
  schoolId   String? @map("school_id")
  school     School?

  reputation      Int          @default(0) @map("user_reputation")
  leaderboard     Leaderboard?
  coins           Int          @default(0) @map("reward_coins")
  redeemedBalance Float        @default(0.0) @map("redeemed_balance")
  doubts          Doubt[]
  answers         Answer[]
  quizzes         QuizResult[]
  roadmaps        Roadmap[]

  passwordResetToken PasswordResetToken[]
  createdAt          DateTime             @default(now()) @map("created_at")
  updatedAt          DateTime             @default(now()) @updatedAt @map("updated_at")

  teacherId   String? @map("teacher_id")
  studentId   String? @map("student_id")
  parentId    String? @map("parent_id")
  libraryId   String? @map("library_id")
  hostelId    String? @map("hostel_id")
  transportId String? @map("transport_id")
  accountId   String? @map("account_id")

  teacher Teacher?
  student Student?

  parent    Parent?
  library   Library?
  hostel    Hostel?
  transport Transport?
  account   Account?

  todo Todo[]

  newspaper Newspaper[]

  pyq PYQ[]

  Competition Competition[]

  Transaction Transaction[]

  employeeType  EmployeeType? @map("employee_type")
  departmentId  String?       @map("department_id")
  department    Department?   @relation(fields: [departmentId], references: [id])
  designationId String?       @map("designation_id")
  designation   Designation?  @relation(fields: [designationId], references: [id])
  role          Role          @default(superadmin) @map("user_role")

  duties                Duty[]
  payrolls              Payroll[]
  inventoryTransactions InventoryTransaction[]
  userPermissions       UserPermissions[]
  bookIssues            BookIssue[]
  disputes              Dispute[]
  disputeMessages       DisputeMessage[]
  schoolFeatureRequests SchoolFeatureRequests[]
}

model PasswordResetToken {
  id Int @id @default(autoincrement()) @map("token_id")

  token     String    @unique @map("reset_token")
  userId    String    @map("user_id")
  createdAt DateTime  @default(now()) @map("created_at")
  expiresAt DateTime  @map("expires_at")
  usedAt    DateTime? @map("used_at")

  user User @relation(fields: [userId], references: [id])

  @@index([expiresAt])
}

model plan {
  id String @id @default(cuid()) @map("plan_id")

  name         String   @map("plan_name")
  price        Float    @map("plan_price")
  durationDays Int      @map("duration_days")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @default(now()) @updatedAt @map("updated_at")

  subscription subscription[]
}

model subscription {
  id String @id @default(cuid()) @map("subscription_id")

  schoolId  String   @map("school_id")
  school    School   @relation(fields: [schoolId], references: [id])
  planId    String   @map("plan_id")
  plan      plan     @relation(fields: [planId], references: [id])
  startDate DateTime @map("start_date")
  endDate   DateTime @map("end_date")
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
}

model Payment {
  id String @id @default(cuid()) @map("payment_id")

  feeId             String   @map("fee_id")
  fee               Fee      @relation(fields: [feeId], references: [id])
  amount            Float    @map("amount_paid")
  razorpayOrderId   String?  @unique @map("razorpay_order_id")
  razorpayPaymentId String?  @map("razorpay_payment_id")
  method            String?  @map("payment_method")
  status            String   @default("Pending") @map("payment_status")
  paymentDate       DateTime @map("payment_date")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @default(now()) @updatedAt @map("updated_at")

  Student Student[]
}

model SalaryPayment {
  id String @id @default(cuid()) @map("salary_payment_id")

  teacherId   String   @map("teacher_id")
  teacher     Teacher  @relation(fields: [teacherId], references: [id])
  schoolId    String   @map("school_id")
  school      School   @relation(fields: [schoolId], references: [id])
  amount      Int      @map("salary_amount")
  period      String   @map("salary_period")
  paymentDate DateTime @map("payment_date")
  method      String   @map("payment_method")
  status      String   @map("payment_status")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at")
}

model Notification {
  id String @id @default(cuid()) @map("notification_id")

  feeId     String   @map("fee_id")
  type      String   @map("notification_type")
  sentAt    DateTime @default(now()) @map("sent_at")
  createdAt DateTime @default(now()) @map("created_at")
}

model Ticket {
  id String @id @default(cuid()) @map("ticket_id")

  title       String   @map("ticket_title")
  description String   @map("ticket_description")
  status      String   @default("Open") @map("ticket_status")
  priority    String   @default("Low") @map("ticket_priority")
  schoolId    String   @map("school_id")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at")

  School School @relation(fields: [schoolId], references: [id])
}

model Feedback {
  id String @id @default(cuid()) @map("feedback_id")

  title       String   @map("feedback_title")
  description String   @map("feedback_description")
  schoolId    String   @map("school_id")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at")

  School School @relation(fields: [schoolId], references: [id])
}

model Todo {
  id String @id @default(cuid()) @map("todo_id")

  title       String     @map("todo_title")
  description String     @map("todo_description")
  status      TodoStatus @default(PENDING) @map("todo_status")
  userId      String     @map("user_id")
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  schoolId    String     @map("school_id")
  school      School     @relation(fields: [schoolId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}

// <--------------------------------------------------------------- Admin Models are defined here------------------------------------------------------------------>

model PaymentSecret {
  id String @id @default(cuid()) @map("payment_secret_id")

  schoolId  String @unique @map("school_id")
  school    School @relation(fields: [schoolId], references: [id])
  keyId     String @map("key_id")
  keySecret String @map("key_secret")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}

model Fee {
  id String @id @default(cuid()) @map("fee_id")

  studentId  String    @map("student_id")
  student    Student   @relation(fields: [studentId], references: [id])
  schoolId   String    @map("school_id")
  school     School    @relation(fields: [schoolId], references: [id])
  amount     Float     @map("amount")
  dueDate    DateTime  @map("due_date")
  category   String    @map("category")
  finePerDay Float     @default(0) @map("fine_per_day")
  status     String    @default("Pending") @map("status")
  Payment    Payment[]

  paymentDate DateTime? @map("payment_date")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
}

model Event {
  id          String   @id @default(cuid()) @map("event_id")
  title       String   @map("title")
  description String   @map("description")
  startTime   DateTime @map("start_time")
  endTime     DateTime @map("end_time")

  classId String? @map("class_id")
  class   Class?  @relation(fields: [classId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}

model Announcement {
  id          String   @id @default(cuid()) @map("announcement_id")
  title       String   @map("title")
  description String   @map("description")
  date        DateTime @default(now()) @map("date")

  classId String? @map("class_id")
  class   Class?  @relation(fields: [classId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}

model Visitor {
  id         String    @id @default(cuid()) @map("id")
  name       String    @map("name")
  phone      String    @map("phone")
  email      String?   @map("email")
  purpose    String    @map("purpose")
  token      String    @unique @map("token")
  validFrom  DateTime  @map("valid_from")
  validUntil DateTime  @map("valid_until")
  entryTime  DateTime? @map("entry_time")
  exitTime   DateTime? @map("exit_time")
  schoolId   String    @map("school_id")
  school     School    @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @default(now()) @updatedAt @map("updated_at")

  classId String? @map("class_id")
  class   Class?  @relation(fields: [classId], references: [id])

  @@unique([phone, validFrom])
  @@index([validUntil])
}

// <---------------------------------------------------------------- Teacher Models are defined here ------------------------------------------------------------------->

model Teacher {
  id String @id @default(cuid()) @map("id")

  dateofJoin            DateTime?     @map("date_of_join")
  fatherName            String        @map("father_name")
  motherName            String        @map("mother_name")
  dateOfBirth           DateTime      @map("date_of_birth")
  maritalStatus         MaritalStatus @map("marital_status")
  languagesKnown        String        @map("languages_known")
  qualification         String        @map("qualification")
  workExperience        String        @map("work_experience")
  previousSchool        String        @map("previous_school")
  previousSchoolAddress String        @map("previous_school_address")
  previousSchoolPhone   String        @map("previous_school_phone")
  panNumber             String        @map("pan_number")
  status                String        @default("Active") @map("status")
  salary                Int           @map("salary")
  contractType          String?       @default("Full Time") @map("contract_type")
  dateOfPayment         DateTime      @map("date_of_payment")
  medicalLeave          String        @map("medical_leave")
  casualLeave           String        @map("casual_leave")
  maternityLeave        String        @map("maternity_leave")
  sickLeave             String        @map("sick_leave")
  accountNumber         String        @map("account_number")
  bankName              String        @map("bank_name")
  ifscCode              String        @map("ifsc_code")
  branchName            String        @map("branch_name")
  route                 String?       @map("route")
  vehicleNumber         String?       @map("vehicle_number")
  pickUpPoint           String?       @map("pick_up_point")
  hostelName            String?       @map("hostel_name")
  roomNumber            String?       @map("room_number")
  facebook              String?       @map("facebook")
  twitter               String?       @map("twitter")
  linkedin              String?       @map("linkedin")
  instagram             String?       @map("instagram")
  youtube               String?       @map("youtube")
  Resume                String        @map("resume")
  joiningLetter         String        @map("joining_letter")
  schoolId              String        @map("school_id")
  userId                String        @unique @map("user_id")
  user                  User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  school                School        @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  createdAt             DateTime      @default(now()) @map("created_at")
  updatedAt             DateTime      @default(now()) @updatedAt @map("updated_at")
  subjects              Subject[]
  lessons               Lesson[]
  classes               Class[]

  salaryPayment SalaryPayment[]
}

model Grade {
  id String @id @default(cuid()) @map("id")

  level    Int       @unique @map("level")
  students Student[]
  classes  Class[]
}

model Class {
  id String @id @default(cuid()) @map("id")

  name          String         @unique @map("name")
  capacity      Int            @map("capacity")
  teacherId     String?        @map("teacher_id")
  teacher       Teacher?       @relation(fields: [teacherId], references: [id])
  // gradeId       String         @map("grade_id")
  // grade         Grade          @relation(fields: [gradeId], references: [id])
  lessons       Lesson[]
  events        Event[]
  announcements Announcement[]
  visitors      Visitor[]
  grades        Grade[]

  Student Student[]
}

model Subject {
  id       String    @id @default(cuid()) @map("id")
  name     String    @unique @map("name")
  teachers Teacher[]
  lessons  Lesson[]
}

model Lesson {
  id          String       @id @default(cuid()) @map("id")
  name        String       @map("name")
  day         Day          @map("day")
  startTime   DateTime     @map("start_time")
  endTime     DateTime     @map("end_time")
  subjectId   String       @map("subject_id")
  subject     Subject      @relation(fields: [subjectId], references: [id])
  classId     String       @map("class_id")
  class       Class        @relation(fields: [classId], references: [id])
  teacherId   String?      @map("teacher_id")
  teacher     Teacher?     @relation(fields: [teacherId], references: [id])
  exams       Exam[]
  assignments Assignment[]
  attendances Attendance[]
}

model Exam {
  id        String   @id @default(cuid()) @map("id")
  title     String   @map("title")
  startTime DateTime @map("start_time")
  endTime   DateTime @map("end_time")
  lessonId  String   @map("lesson_id")
  lesson    Lesson   @relation(fields: [lessonId], references: [id])
  results   Result[]
}

model Assignment {
  id        String   @id @default(cuid()) @map("id")
  title     String   @map("title")
  startDate DateTime @map("start_date")
  dueDate   DateTime @map("due_date")
  lessonId  String   @map("lesson_id")
  lesson    Lesson   @relation(fields: [lessonId], references: [id])
  results   Result[]
}

model Result {
  id           String      @id @default(cuid()) @map("id")
  score        Int         @map("score")
  examId       String?     @map("exam_id")
  exam         Exam?       @relation(fields: [examId], references: [id])
  assignmentId String?     @map("assignment_id")
  assignment   Assignment? @relation(fields: [assignmentId], references: [id])
  studentId    String      @map("student_id")
  student      Student     @relation(fields: [studentId], references: [id])
}

model Attendance {
  id        String   @id @default(cuid()) @map("id")
  date      DateTime @map("date")
  present   Boolean  @map("present")
  studentId String   @map("student_id")
  student   Student  @relation(fields: [studentId], references: [id])
  lessonId  String   @map("lesson_id")
  lesson    Lesson   @relation(fields: [lessonId], references: [id])

  Bus Bus[]
}

// <--------------------------------------------------------------------------- Student Models are defined here ------------------------------------------------------------------->

model Student {
  id             String   @id @default(cuid())
  academicYear   String   @map("academic_year")
  admissionNo    String   @map("admission_no")
  admissionDate  DateTime @map("admission_date")
  rollNo         String   @map("roll_no")
  status         String?  @default("Active")
  section        String
  dateOfBirth    DateTime @map("date_of_birth")
  Religion       String?  @map("religion")
  category       String?  @map("category")
  caste          String?  @map("caste")
  motherTongue   String?  @map("mother_tongue")
  languagesKnown String   @map("languages_known")

  fatherName       String @map("father_name")
  fatheremail      String @map("father_email")
  fatherPhone      String @map("father_phone")
  fatherOccupation String @map("father_occupation")

  motherName       String @map("mother_name")
  motherEmail      String @map("mother_email")
  motherPhone      String @map("mother_phone")
  motherOccupation String @map("mother_occupation")

  gardianName       String @map("guardian_name")
  gardianRealtion   String @map("guardian_relation")
  gardianEmail      String @map("guardian_email")
  gardianPhone      String @map("guardian_phone")
  gardianOccupation String @map("guardian_occupation")
  gardianAddress    String @map("guardian_address")

  areSiblingStudying  String @map("are_siblings_studying")
  siblingName         String @map("sibling_name")
  siblingClass        String @map("sibling_class")
  siblingRollNo       String @map("sibling_roll_no")
  sibllingAdmissionNo String @map("sibling_admission_no")

  currentAddress   String @map("current_address")
  permanentAddress String @map("permanent_address")

  vehicleNumber String?  @map("vehicle_number")
  pickUpPoint   String?  @map("pick_up_point")
  routeId       String?  @map("route_id")
  route         Route?   @relation(fields: [routeId], references: [id])
  busId         String?  @map("bus_id")
  bus           Bus?     @relation(fields: [busId], references: [id])
  busStopId     String?  @map("bus_stop_id")
  busStop       BusStop? @relation(fields: [busStopId], references: [id])

  hostelName String? @map("hostel_name")
  roomNumber String? @map("room_number")

  medicalCertificate  String @map("medical_certificate")
  transferCertificate String @map("transfer_certificate")

  medicaConditon String @map("medical_condition")
  allergies      String
  medicationName String @map("medication_name")

  schoolName           String?                @map("school_name")
  address              String?                @map("address")
  schoolId             String                 @map("school_id")
  userId               String                 @unique @map("user_id")
  user                 User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  school               School                 @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  createdAt            DateTime               @default(now()) @map("created_at")
  updatedAt            DateTime               @default(now()) @updatedAt @map("updated_at")
  classId              String                 @map("class_id")
  class                Class                  @relation(fields: [classId], references: [id])
  attendances          Attendance[]
  results              Result[]
  Grade                Grade[]
  parent               Parent[]
  fees                 Fee[]
  payments             Payment[]
  busAttendance        BusAttendance[]
  complaint            Complaint[]
  Room                 Room[]
  accommodationRequest AccommodationRequest[]
  hostelFee            HostelFee[]
  medicalEmergency     MedicalEmergency[]
  outpassRequest       OutpassRequest[]
}

model Doubt {
  id        String   @id @default(cuid())
  title     String
  content   String
  userId    String   @map("user_id")
  user      User     @relation(fields: [userId], references: [id])
  answers   Answer[]
  upvotes   Int      @default(0)
  createdAt DateTime @default(now()) @map("created_at")
}

model PYQ {
  id         String   @id @default(cuid())
  question   String
  solution   String
  subject    String
  topic      String
  uploaderId String   @map("uploader_id")
  uploader   User     @relation(fields: [uploaderId], references: [id])
  createdAt  DateTime @default(now()) @map("created_at")
}

model Answer {
  id        String   @id @default(cuid())
  content   String
  userId    String   @map("user_id")
  doubtId   String   @map("doubt_id")
  user      User     @relation(fields: [userId], references: [id])
  doubt     Doubt    @relation(fields: [doubtId], references: [id])
  upvotes   Int      @default(0)
  createdAt DateTime @default(now()) @map("created_at")
}

model Leaderboard {
  id          String   @id @default(cuid())
  userId      String   @unique @map("user_id")
  user        User     @relation(fields: [userId], references: [id])
  points      Int      @default(0)
  coinsEarned Int      @default(0) @map("coins_earned")
  rank        Int
  updatedAt   DateTime @updatedAt @map("updated_at")
}

model Competition {
  id        String   @id @default(cuid())
  name      String
  userId    String   @map("user_id")
  user      User     @relation(fields: [userId], references: [id])
  score     Int      @default(0)
  createdAt DateTime @default(now()) @map("created_at")
}

model Roadmap {
  id        String   @id @default(cuid())
  title     String
  userId    String   @map("user_id")
  user      User     @relation(fields: [userId], references: [id])
  topics    Topic[]
  createdAt DateTime @default(now()) @map("created_at")
}

model Topic {
  id        String  @id @default(cuid())
  name      String
  roadmapId String  @map("roadmap_id")
  roadmap   Roadmap @relation(fields: [roadmapId], references: [id])
}

model Quiz {
  id         String       @id @default(cuid())
  question   String
  options    String[]
  answer     String
  createdAt  DateTime     @default(now()) @map("created_at")
  quizResult QuizResult[]
}

model QuizResult {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  quizId    String   @map("quiz_id")
  user      User     @relation(fields: [userId], references: [id])
  quiz      Quiz     @relation(fields: [quizId], references: [id])
  score     Int
  createdAt DateTime @default(now()) @map("created_at")
}

model Newspaper {
  id        String   @id @default(cuid())
  title     String
  content   String
  userId    String   @map("user_id")
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now()) @map("created_at")
}

model Transaction {
  id         String   @id @default(cuid())
  userId     String   @map("user_id")
  user       User     @relation(fields: [userId], references: [id])
  coinsUsed  Int      @map("coins_used")
  amountPaid Float    @map("amount_paid")
  status     String   @default("PENDING") @map("status")
  createdAt  DateTime @default(now()) @map("created_at")
}

// <------------------------------------------------------------- Parent Models are defined here ------------------------------------------------------------------->

model Parent {
  id        String    @id @default(cuid())
  role      Role      @default(parent)
  password  String?
  userId    String?   @unique @map("user_id")
  user      User?     @relation(fields: [userId], references: [id])
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at")
  students  Student[]
}

// <------------------------------------------------------------- Library Models are defined here ------------------------------------------------------------------->

model Library {
  id       String @id @default(cuid())
  schoolId String @map("school_id")

  finePerDay Float    @default(0.0) @map("fine_per_day")
  books      Book[]
  userId     String?  @unique @map("user_id")
  user       User?    @relation(fields: [userId], references: [id])
  school     School   @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @default(now()) @updatedAt @map("updated_at")
}

model Book {
  id               String       @id @default(cuid())
  title            String
  isbn             String?
  publicationDate  DateTime?    @map("publication_date")
  genre            String?
  type             BookType
  department       String?
  class            String?
  subject          String?
  edition          String?
  nextEditionCheck DateTime?    @map("next_edition_check")
  libraryId        String       @map("library_id")
  library          Library      @relation(fields: [libraryId], references: [id])
  authors          BookAuthor[]
  copies           BookCopy[]
  createdAt        DateTime     @default(now()) @map("created_at")
  updatedAt        DateTime     @default(now()) @updatedAt @map("updated_at")

  @@index([isbn])
}

model Author {
  id        String       @id @default(cuid())
  name      String
  books     BookAuthor[]
  createdAt DateTime     @default(now()) @map("created_at")
  updatedAt DateTime     @default(now()) @updatedAt @map("updated_at")
}

model BookAuthor {
  bookId   String @map("book_id")
  authorId String @map("author_id")
  book     Book   @relation(fields: [bookId], references: [id])
  author   Author @relation(fields: [authorId], references: [id])

  @@id([bookId, authorId])
}

model BookCopy {
  id              String         @id @default(cuid())
  bookId          String         @map("book_id")
  accessionNumber String         @unique @map("accession_number") // Unique identifier for each copy
  status          BookCopyStatus @default(AVAILABLE)
  book            Book           @relation(fields: [bookId], references: [id])
  issues          BookIssue[] // History of issues for this copy
  createdAt       DateTime       @default(now()) @map("created_at")
  updatedAt       DateTime       @default(now()) @updatedAt @map("updated_at")
}

model BookIssue {
  id         String    @id @default(cuid())
  bookCopyId String    @map("book_copy_id")
  userId     String    @map("user_id")
  issueDate  DateTime  @map("issue_date")
  dueDate    DateTime  @map("due_date")
  returnDate DateTime? @map("return_date")

  fine     Fine?     @relation(name: "BookIssueToFine")
  finePaid Boolean   @default(false) @map("fine_paid")
  bookCopy BookCopy  @relation(fields: [bookCopyId], references: [id])
  user     User      @relation(fields: [userId], references: [id])
  disputes Dispute[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
}

model Fine {
  id          String @id @default(cuid())
  bookIssueId String @unique @map("book_issue_id")

  amount Float
  reason String
  paid   Boolean @default(false)

  bookIssue BookIssue @relation(name: "BookIssueToFine", fields: [bookIssueId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
}

model Dispute {
  id          String           @id @default(cuid())
  bookIssueId String           @map("book_issue_id")
  userId      String           @map("user_id")
  reason      String
  status      DisputeStatus    @default(PENDING)
  resolution  String?
  bookIssue   BookIssue        @relation(fields: [bookIssueId], references: [id])
  user        User             @relation(fields: [userId], references: [id])
  messages    DisputeMessage[]
  createdAt   DateTime         @default(now()) @map("created_at")
  updatedAt   DateTime         @default(now()) @updatedAt @map("updated_at")
}

model DisputeMessage {
  id        String   @id @default(cuid())
  disputeId String   @map("dispute_id")
  userId    String   @map("user_id")
  message   String
  dispute   Dispute  @relation(fields: [disputeId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now()) @map("created_at")
}

// <------------------------------------------------------------- Hostel Models are defined here ------------------------------------------------------------------->

model Hostel {
  id                   String                 @id @default(cuid())
  hostelName           String                 @map("hostel_name")
  location             String?
  capacity             Int
  schoolId             String                 @map("school_id")
  school               School                 @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  userId               String?                @unique @map("user_id")
  user                 User?                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  rooms                Room[]
  createdAt            DateTime               @default(now()) @map("created_at")
  updatedAt            DateTime               @default(now()) @updatedAt @map("updated_at")
  complaint            Complaint[]
  duty                 Duty[]
  hostelExpense        HostelExpense[]
  accommodationRequest AccommodationRequest[]
  hostelFee            HostelFee[]
  medicalEmergency     MedicalEmergency[]
}

model Room {
  id          String      @id @default(cuid())
  number      String
  type        RoomType
  status      RoomStatus  @default(VACANT)
  hostelId    String      @map("hostel_id")
  hostel      Hostel      @relation(fields: [hostelId], references: [id])
  students    Student[]
  inventories Inventory[]
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @default(now()) @updatedAt @map("updated_at")
}

model Inventory {
  id        String   @id @default(cuid())
  name      String
  quantity  Int
  roomId    String   @map("room_id")
  room      Room     @relation(fields: [roomId], references: [id])
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
}

model AccommodationRequest {
  id        String        @id @default(cuid())
  studentId String        @map("student_id")
  student   Student       @relation(fields: [studentId], references: [id])
  hostelId  String        @map("hostel_id")
  hostel    Hostel        @relation(fields: [hostelId], references: [id])
  status    RequestStatus @default(PENDING)
  createdAt DateTime      @default(now()) @map("created_at")
  updatedAt DateTime      @default(now()) @updatedAt @map("updated_at")
}

model HostelFee {
  id        String    @id @default(cuid())
  amount    Float
  dueDate   DateTime  @map("due_date")
  studentId String    @map("student_id")
  student   Student   @relation(fields: [studentId], references: [id])
  hostelId  String    @map("hostel_id")
  hostel    Hostel    @relation(fields: [hostelId], references: [id])
  status    FeeStatus @default(UNPAID)
  type      FeeType
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at")
}

model MedicalEmergency {
  id          String   @id @default(cuid())
  description String
  date        DateTime
  studentId   String   @map("student_id")
  student     Student  @relation(fields: [studentId], references: [id])
  hostelId    String   @map("hostel_id")
  hostel      Hostel   @relation(fields: [hostelId], references: [id])
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at")
}

model OutpassRequest {
  id        String        @id @default(cuid())
  studentId String        @map("student_id")
  student   Student       @relation(fields: [studentId], references: [id])
  reason    String
  fromDate  DateTime      @map("from_date")
  toDate    DateTime      @map("to_date")
  status    RequestStatus @default(PENDING)
  createdAt DateTime      @default(now()) @map("created_at")
  updatedAt DateTime      @default(now()) @updatedAt @map("updated_at")
}

model HostelExpense {
  id          String   @id @default(cuid())
  description String
  amount      Float
  date        DateTime
  hostelId    String   @map("hostel_id")
  hostel      Hostel   @relation(fields: [hostelId], references: [id])
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at")
}

model Duty {
  id          String   @id @default(cuid())
  description String
  assignedTo  String?  @map("assigned_to")
  user        User?    @relation(fields: [assignedTo], references: [id])
  hostelId    String   @map("hostel_id")
  hostel      Hostel   @relation(fields: [hostelId], references: [id])
  name        String
  schoolId    String   @map("school_id")
  school      School   @relation(fields: [schoolId], references: [id])
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at")
}

model Complaint {
  id          String          @id @default(cuid())
  description String
  studentId   String          @map("student_id")
  student     Student         @relation(fields: [studentId], references: [id])
  hostelId    String          @map("hostel_id")
  hostel      Hostel          @relation(fields: [hostelId], references: [id])
  status      ComplaintStatus @default(OPEN)
  createdAt   DateTime        @default(now()) @map("created_at")
  updatedAt   DateTime        @default(now()) @updatedAt @map("updated_at")
}

// <------------------------------------------------------------- Transport Models are defined here ------------------------------------------------------------------->

model Transport {
  id        String   @id @default(cuid())
  schoolId  String   @map("school_id")
  userId    String?  @unique @map("user_id")
  user      User?    @relation(fields: [userId], references: [id])
  school    School   @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
}

model Bus {
  id            String          @id @default(cuid())
  busNumber     String          @map("bus_number")
  capacity      Int
  schoolId      String          @map("school_id")
  school        School          @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  routes        Route[]
  drivers       Driver[]
  conductors    Conductor[]
  students      Student[]
  attendances   Attendance[]
  createdAt     DateTime        @default(now()) @map("created_at")
  updatedAt     DateTime        @default(now()) @updatedAt @map("updated_at")
  busAttendance BusAttendance[]

  @@index([busNumber])
}

model Driver {
  id        String   @id @default(cuid())
  name      String
  license   String   @unique
  busId     String   @map("bus_id")
  bus       Bus      @relation(fields: [busId], references: [id])
  schoolId  String   @map("school_id")
  school    School   @relation(fields: [schoolId], references: [id])
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
}

model Conductor {
  id        String   @id @default(cuid())
  name      String
  busId     String   @map("bus_id")
  bus       Bus      @relation(fields: [busId], references: [id])
  schoolId  String   @map("school_id")
  school    School   @relation(fields: [schoolId], references: [id])
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
}

model Incharge {
  id        String   @id @default(cuid())
  name      String
  schoolId  String   @map("school_id")
  school    School   @relation(fields: [schoolId], references: [id])
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
}

model Route {
  id        String    @id @default(cuid())
  name      String
  busId     String    @map("bus_id")
  bus       Bus       @relation(fields: [busId], references: [id])
  schoolId  String    @map("school_id")
  school    School    @relation(fields: [schoolId], references: [id])
  busStops  BusStop[]
  students  Student[]
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at")
}

model BusStop {
  id        String    @id @default(cuid())
  name      String
  location  String
  routeId   String    @map("route_id")
  route     Route     @relation(fields: [routeId], references: [id])
  schoolId  String    @map("school_id")
  school    School    @relation(fields: [schoolId], references: [id])
  students  Student[]
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at")
}

model BusAttendance {
  id        String   @id @default(cuid())
  studentId String   @map("student_id")
  student   Student  @relation(fields: [studentId], references: [id])
  busId     String   @map("bus_id")
  bus       Bus      @relation(fields: [busId], references: [id])
  date      DateTime @default(now())
  status    String // "Boarded", "Alighted"
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
}

// <-------------------------------------------------------------- Account Models are defined here ------------------------------------------------------------------->

model Account {
  id        String   @id @default(cuid())
  schoolId  String   @map("school_id")
  userId    String   @unique @map("user_id")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  school    School   @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
}

model UserPermissions {
  id               Int      @id @default(autoincrement())
  guid             String   @unique @default(uuid()) @map("guid")
  userId           String?  @map("user_id") @db.VarChar(255)
  moduleName       String   @map("module_name") @db.VarChar(255)
  modulePermission String   @map("module_permission") @db.VarChar(255)
  status           Int      @default(0) @map("status") @db.Integer // 0 for inactive and 1 for active
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map(name: "user_permissions")
}

model SchoolFeatureRequests {
  id         String   @id @default(cuid())
  userId     String   @map("user_id") @db.VarChar(255)
  schoolId   String   @map("school_id") @db.VarChar(255)
  moduleName String   @map("module_name") @db.VarChar(255)
  status     Int      @map("status") @db.Integer
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  user   User   @relation(fields: [userId], references: [id])
  school School @relation(fields: [schoolId], references: [id])

  @@map(name: "school_feature_requests")
}

// <---------------------------------------------------------------- All Enums are defined here  ------------------------------------------------------------------->

enum UserSex {
  MALE
  FEMALE
}

enum Day {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
}

enum Role {
  superadmin
  admin
  teacher
  student
  parent
  library
  hostel
  transport
  account
}

enum MaritalStatus {
  MARRIED
  UNMARRIED
  DIVORCED
}

enum TodoStatus {
  PENDING
  COMPLETED
}

enum BookType {
  BOOK
  MAGAZINE
  COMIC
}

enum BookCopyStatus {
  AVAILABLE
  ISSUED
  LOST
  DAMAGED
}

enum DisputeStatus {
  PENDING
  RESOLVED
  DISMISSED
}

enum RoomType {
  SINGLE
  DOUBLE
  TRIPLE
}

enum RoomStatus {
  OCCUPIED
  VACANT
  MAINTENANCE
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
}

enum FeeStatus {
  PAID
  UNPAID
  OVERDUE
}

enum FeeType {
  REGULAR
  FINE
}

enum ComplaintStatus {
  OPEN
  CLOSED
}

enum EmployeeType {
  TEACHER
  LIBRARIAN
  ADMINISTRATOR
  SUPPORT
}

enum PayrollStatus {
  PENDING
  PAID
  CANCELLED
}

enum TransactionType {
  ADD
  REMOVE
  TRANSFER
}

// goverment Exams  --> UPSC , SSC , Bank PO , Railway , Defence --> Link this modulef witj eduni hub project 

// chat --> Add friends, remove friends , chat with friends, can create groups, send media , block user, unblock user , report user, see only thier schools student, video call features , audio call feature , 

// zoom meeting call , White board(With all Fetures ), screen sharing, recording, chat, raise hand, mute, unmute, video off, video on, share screen, invite, end meeting, leave meeting,

// download reports ,  import Reports , export Reports , Custom report download , print , share Reports 


